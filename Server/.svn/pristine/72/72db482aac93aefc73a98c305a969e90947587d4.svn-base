/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package myfacebookserver;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Rehan
 */
public class DatabaseOperations {

    Connection dbConnection = null;
    static final String SQL_TO_WRITE_OBJECT = "INSERT INTO wall(user_id, time_stamp, post) VALUES (?, ?, ?)";
    static final String SQL_TO_READ_OBJECT = "SELECT post FROM wall WHERE user_id = ?";
    static final String SQL_TO_CHECK_USER_ID = "SELECT user_id FROM userproperties WHERE user_id = ?";
    static final String SQL_TO_CHECK_PASSWORD = "SELECT password FROM userproperties WHERE user_id = ?";
    static final String SQL_TO_GET_FRIEND_LIST = "SELECT roster_id FROM roster WHERE user_id = ? and status = ?";

    void openConnection() {
        String url = "jdbc:mysql://localhost:3306/my_facebook";

        try {
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MyFacebookServer.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConnection = DriverManager.getConnection(url, "root", "sheta");

        } catch (SQLException ex) {
            Logger.getLogger(MyFacebookServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void closeConnection() {
        try {
            dbConnection.close();

        } catch (SQLException ex) {
            Logger.getLogger(DatabaseOperations.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean executeUpdate(String sql) {
        try {
            Statement statement = dbConnection.createStatement();
            int rs = statement.executeUpdate(sql);
            if (rs < 0) {
                return false;
            }
            statement.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(DatabaseOperations.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    public ResultSet executeQuery(String sql) {
        ResultSet resultSet = null;

        try {
            Statement statement = dbConnection.createStatement();
            resultSet = statement.executeQuery(sql);
            //statement.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(DatabaseOperations.class.getName()).log(Level.SEVERE, null, ex);
        }
        return resultSet;
    }

    void registration(String userid, String password) {
    }

    void login() {
    }

    void logout() {
    }

    /**
     * This method will write a java object to the database Parameters: connection object and object to be serialized
     */
    public long writeJavaObject(Object object) throws Exception {
        String className = object.getClass().getName();
        PreparedStatement pstmt = dbConnection.prepareStatement(SQL_TO_WRITE_OBJECT);

        pstmt.setString(1, "riyad");
        pstmt.setObject(2, new Date(System.currentTimeMillis()));
        pstmt.setObject(3, object);
        pstmt.executeUpdate();
        int id = -1;

        pstmt.close();
        System.out.println("Serialization Successful." + "\nSerialized Class: " + className);
        return id;
    }

    /**
     * This class will de-serialize a java object from the database
     */
    public Object readJavaObject(long id) throws Exception {
        PreparedStatement pstmt = dbConnection.prepareStatement(SQL_TO_READ_OBJECT);
        pstmt.setString(1, "riyad");
        ResultSet rs = pstmt.executeQuery();
        rs.next();
        byte[] buf = rs.getBytes("post");
        ObjectInputStream objectIn = null;

        if (buf != null) {
            objectIn = new ObjectInputStream(new ByteArrayInputStream(buf));
        }
        Object object = objectIn.readObject();
        String className = object.getClass().getName();
        rs.close();
        pstmt.close();
        System.out.println("Deserialization Successful." + "\nDeserialized Class: " + className);
        return object;
    }

    public boolean userExists(String user_id) {
        try {
            PreparedStatement pstmt = dbConnection.prepareStatement(SQL_TO_CHECK_USER_ID);
            pstmt.setString(1, user_id);
            ResultSet rs = pstmt.executeQuery();
            String userID = null;

            if (rs.next()) {
                userID = rs.getString("user_id");
            }
            rs.close();
            pstmt.close();

            if (userID == null) {
                return false;
            }

        } catch (SQLException ex) {
            Logger.getLogger(DatabaseOperations.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    public boolean passwordMatches(String user_id, String password) {
        try {
            PreparedStatement pstmt = dbConnection.prepareStatement(SQL_TO_CHECK_PASSWORD);
            pstmt.setString(1, user_id);
            ResultSet rs = pstmt.executeQuery();
            String userPass = null;

            if (rs.next()) {
                userPass = rs.getString("password");
            }
            rs.close();
            pstmt.close();

            if (userPass.equals(password)) {
                return true;
            }

        } catch (SQLException ex) {
            Logger.getLogger(DatabaseOperations.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    public ArrayList<String> getFrindsList(String userID) {
        ArrayList<String> listFriends = new ArrayList<String>();
        try {
            PreparedStatement pstmt = dbConnection.prepareStatement(SQL_TO_GET_FRIEND_LIST);
            pstmt.setString(1, userID);
            pstmt.setInt(2, Constants.ROSTER_STATUS_ACCEPTED);
            ResultSet resultSet = pstmt.executeQuery();

            while (resultSet.next()) {
                listFriends.add(resultSet.getString("roster_id"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseOperations.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listFriends;
    }
}
